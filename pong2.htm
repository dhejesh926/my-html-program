<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Next Level Pong Game</title>
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background-color: black;
      margin: 0;
    }

    canvas {
      border: 2px solid white;
      background-color: #333;
    }
  </style>
</head>
<body>
  <canvas id="pongCanvas" width="800" height="400"></canvas>

  <script type="text/javascript">
    class Paddle {
      constructor(x, y, width, height, color) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.color = color;
        this.dy = 0;
      }

      draw(ctx) {
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
      }

      move(canvasHeight) {
        this.y += this.dy;
        if (this.y < 0) this.y = 0;
        if (this.y + this.height > canvasHeight) this.y = canvasHeight - this.height;
      }
    }

    class Ball {
      constructor(x, y, radius, color) {
        this.x = x;
        this.y = y;
        this.radius = radius;
        this.color = color;
        this.dx = 4;
        this.dy = 4;
      }

      draw(ctx) {
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.closePath();
        ctx.fill();
      }

      move(canvasWidth, canvasHeight, paddleLeft, paddleRight) {
        this.x += this.dx;
        this.y += this.dy;

        // Wall collision (top/bottom)
        if (this.y - this.radius < 0 || this.y + this.radius > canvasHeight) {
          this.dy = -this.dy;
        }

        // Paddle collision
        if (this.x - this.radius < paddleLeft.x + paddleLeft.width && this.y > paddleLeft.y && this.y < paddleLeft.y + paddleLeft.height) {
          this.dx = -this.dx;
        }

        if (this.x + this.radius > paddleRight.x && this.y > paddleRight.y && this.y < paddleRight.y + paddleRight.height) {
          this.dx = -this.dx;
        }

        // Reset ball if out of bounds
        if (this.x + this.radius < 0 || this.x - this.radius > canvasWidth) {
          this.x = canvasWidth / 2;
          this.y = canvasHeight / 2;
          this.dx = -this.dx;
        }
      }
    }

    window.onload = () => {
      const canvas = document.getElementById("pongCanvas");
      const ctx = canvas.getContext("2d");

      const paddleLeft = new Paddle(10, canvas.height / 2 - 50, 10, 100, 'white');
      const paddleRight = new Paddle(canvas.width - 20, canvas.height / 2 - 50, 10, 100, 'white');
      const ball = new Ball(canvas.width / 2, canvas.height / 2, 10, 'white');

      // Player control
      window.addEventListener('keydown', function (e) {
        if (e.key === 'ArrowUp') {
          paddleLeft.dy = -5;
        } else if (e.key === 'ArrowDown') {
          paddleLeft.dy = 5;
        }
      });

      window.addEventListener('keyup', function (e) {
        if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {
          paddleLeft.dy = 0;
        }
      });

      function update() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        paddleLeft.move(canvas.height);
        paddleRight.move(canvas.height);
        ball.move(canvas.width, canvas.height, paddleLeft, paddleRight);
        paddleRight.y = ball.y - paddleRight.height / 2; // AI paddle follows ball

        paddleLeft.draw(ctx);
        paddleRight.draw(ctx);
        ball.draw(ctx);
      }

      function gameLoop() {
        update();
        requestAnimationFrame(gameLoop);
      }

      gameLoop();
    };
  </script>
</body>
</html>
